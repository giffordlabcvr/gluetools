apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.hidetake.ssh'

sourceCompatibility = 1.8

remotes {
  gluehome {
    host = 'gluehome.cvr.gla.ac.uk'
    user = 'js460b'
    identity = file('/Users/joshsinger/.ssh/gluehome_id_rsa')
  }
}

buildscript {
  repositories {
    // for ssh-deploy stuff
    jcenter()
  }
  dependencies {
    classpath group: 'org.hidetake', name: 'gradle-ssh-plugin', version: '1.1.3'
  }
}


jar {
    manifest {
        attributes 'Implementation-Title': 'GLUE tools',
                   'Implementation-Version': version
    }
}

task jarAll(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'GLUE tools',  
        	       'Implementation-Version': version,
                   'Main-Class': 'uk.ac.gla.cvr.gluetools.core.console.Console'

    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}


// config for Glue which tells it where to find its database. 
task deployGlueConfig {
  ext.glueConfigFile = new File(projectDir, '/gluetools-config-gluehome.xml')
  ext.glueConfigTouchfile = new File(buildDir, '/deployGlueConfig.touchfile')
  inputs.file glueConfigFile
  outputs.file glueConfigTouchfile
  doLast {
	  println "Uploading "+glueConfigFile.name
	  ssh.run {
	    session(remotes.gluehome) {
	      execute 'sudo -n mkdir -p /opt/gluehome'
	      execute 'sudo -n chmod a+rw /opt/gluehome'
	      put from: glueConfigFile, into: '/opt/gluehome'
	    }
	  }
	  glueConfigTouchfile.delete()
	  buildDir.mkdirs()
	  glueConfigTouchfile.createNewFile()
  }
}

// gluetools core jar. 
task deployJar(dependsOn: ['jarAll','deployGlueConfig']) {
  ext.jarFile = new File(buildDir, '/libs/'+project.name+"-all-"+version+'.jar')
  ext.deployJarTouchfile = new File(buildDir, '/deployJar.touchfile')
  inputs.file jarFile
  outputs.file deployJarTouchfile
  doLast {
	  println "Uploading "+jarFile.name
	  ssh.run {
	    session(remotes.gluehome) {
	      execute 'sudo -n mkdir -p /opt/gluehome'
	      execute 'sudo -n chmod a+rw /opt/gluehome'
	      put from: jarFile, into: '/opt/gluehome'
	    }
	  }
	  deployJarTouchfile.delete()
	  buildDir.mkdirs()
	  deployJarTouchfile.createNewFile()
  }
}

// HCV project 
task deployHcvProject(dependsOn: ['deployJar']) {
  ext.jarFileName = project.name+"-all-"+version+'.jar'
  ext.hcvProjectDir = new File(projectDir, 'hcvProject')
  ext.deployHcvProjectTouchfile = new File(buildDir, '/deployHcvProject.touchfile')
  inputs.dir hcvProjectDir
  outputs.file deployHcvProjectTouchfile
  doLast {
	  println "Uploading GLUE project: "+hcvProjectDir.name
	  ssh.run {
	    session(remotes.gluehome) {
	      execute 'rm -rf /opt/gluehome/hcvProject'
	      put from: hcvProjectDir, into: '/opt/gluehome'
	      execute 'cd /opt/gluehome ; java -jar '+jarFileName+' -c gluetools-config-gluehome.xml -n -f hcvProject/hcvProject.glue'
	    }
	  }
	  deployHcvProjectTouchfile.delete()
	  buildDir.mkdirs()
	  deployHcvProjectTouchfile.createNewFile()
  }
}



repositories {
    mavenCentral()
	// this is for the vpp dependency of the cayenne tools. 
    maven {
    	url 'http://repo.spring.io/libs-release-remote/'
    }
    // required for j-text-utils
    // maven {
    //	url 'http://d-maven.googlecode.com/svn/trunk/repo'
    // }
}


task checkCayenneTools << {
    ant.taskdef(name:'cgen', 
    			classname:'org.apache.cayenne.tools.CayenneGeneratorTask', 
    			classpath: configurations.cgen.asPath)
}


configurations {
    cgen
}


// uses cayenne to generate the datamodel classes.
task datamodel(dependsOn: 'checkCayenneTools') << {
	String destDir = 'src/main/java'
	String superPkg = 'uk.ac.gla.cvr.gluetools.core.datamodel.auto'
	String mapFile1 = 'src/main/resources/gluecore-map.map.xml'
	ant.cgen(map: mapFile1, destDir: destDir, usepkgpath: true, superpkg: superPkg)
	String mapFile2 = 'src/main/resources/glueproject-map.map.xml'
	ant.cgen(map: mapFile2, destDir: destDir, usepkgpath: true, superpkg: superPkg)
	String mapFile3 = 'src/main/resources/gluemeta-map.map.xml'
	ant.cgen(map: mapFile3, destDir: destDir, usepkgpath: true, superpkg: superPkg)
}

dependencies {
   	compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'
    cgen group: 'org.apache.cayenne', name: 'cayenne-tools', version: '3.1'
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task exampleProjectZip(type: Zip) {
	from projectDir
	ext.exampleProjectDir = new File(projectDir, 'exampleProject')
	ext.exampleProjectTouchfile = new File(buildDir, '/exampleProject.touchfile')
	inputs.dir exampleProjectDir
	outputs.file exampleProjectTouchfile
    baseName "exampleProject"
    include "exampleProject/**"
    doLast {
	  exampleProjectTouchfile.delete()
	  buildDir.mkdirs()
	  exampleProjectTouchfile.createNewFile()
  }


}

