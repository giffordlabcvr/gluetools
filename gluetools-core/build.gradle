/**
 *    GLUE: A flexible system for virus sequence data
 *    Copyright (C) 2018 The University of Glasgow
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Affero General Public License as published
 *    by the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.

 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *    Contact details:
 *    MRC-University of Glasgow Centre for Virus Research
 *    Sir Michael Stoker Building, Garscube Campus, 464 Bearsden Road, 
 *    Glasgow G61 1QH, United Kingdom
 *    
 *    Josh Singer: josh.singer@glasgow.ac.uk
 *    Rob Gifford: robert.gifford@glasgow.ac.uk
*/
apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.hidetake.ssh'

sourceCompatibility = 1.8

remotes {
  gluetools_cvr {
    host = 'glue-tools.cvr.gla.ac.uk'
    user = 'ok16n'
    identity = file('/Users/imacadmin/.ssh/glue_tools_id_rsa')
  }  
}

repositories {
    mavenCentral()
	// this is for the vpp dependency of the cayenne tools. 
    maven {
    	url 'https://repo.spring.io/plugins-release/'
    }
    // required for j-text-utils
    // maven {
    //	url 'http://d-maven.googlecode.com/svn/trunk/repo'
    // }
}

configurations {
    cgen
}

dependencies {
   	compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'
    cgen group: 'org.apache.cayenne', name: 'cayenne-tools', version: '3.1.1'
}

buildscript {
  repositories {
    // for ssh-deploy stuff
    jcenter()
  }
  dependencies {
    classpath group: 'org.hidetake', name: 'gradle-ssh-plugin', version: '1.1.3'
  }
}


jar {
	manifest {
        attributes 'Implementation-Title': 'GLUE tools',  
        	       'Implementation-Version': version,
                   'Main-Class': 'uk.ac.gla.cvr.gluetools.core.console.Console'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    
    exclude 'META-INF/*.RSA', 
    	'META-INF/*.SF',
    	'META-INF/*.DSA',
    	'META-INF/LICENSE.txt',
    	'META-INF/LICENSE',
    	'META-INF/DISCLAIMER',
    	'META-INF/DEPENDENCIES',
    	'META-INF/NOTICE.txt',
    	'META-INF/NOTICE'
    metaInf { from 'src/main/java/META-INF/LICENSE.txt', 'src/main/java/META-INF/NOTICE.txt' }

}

task checkCayenneTools {
	doLast {
	    ant.taskdef(name:'cgen', 
	    			classname:'org.apache.cayenne.tools.CayenneGeneratorTask', 
	    			classpath: configurations.cgen.asPath)
    }
}


// uses cayenne to generate the datamodel classes.
task datamodel(dependsOn: 'checkCayenneTools') {
	doLast {
		String destDir = 'src/main/java'
		String superPkg = 'uk.ac.gla.cvr.gluetools.core.datamodel.auto'
		String mapFile1 = 'src/main/resources/gluecore-map.map.xml'
		ant.cgen(map: mapFile1, destDir: destDir, usepkgpath: true, superpkg: superPkg)
		String mapFile2 = 'src/main/resources/glueproject-map.map.xml'
		ant.cgen(map: mapFile2, destDir: destDir, usepkgpath: true, superpkg: superPkg)
		String mapFile3 = 'src/main/resources/gluemeta-map.map.xml'
		ant.cgen(map: mapFile3, destDir: destDir, usepkgpath: true, superpkg: superPkg)
	}
}

// uses cayenne to generate the datamodel classes.
task datamodelDigs(dependsOn: 'checkCayenneTools') {
	doLast {
		String destDir = 'src/main/java'
		String superPkg = 'uk.ac.gla.cvr.gluetools.core.digs.importer.model.auto'
		String mapFile1 = 'src/main/resources/digs-map.map.xml'
		ant.cgen(map: mapFile1, destDir: destDir, usepkgpath: true, superpkg: superPkg)
	}
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task exampleProjectZip(type: Zip) {
	from projectDir
	ext.exampleProjectDir = new File(projectDir, 'exampleProject')
	ext.exampleProjectTouchfile = new File(buildDir, '/exampleProject.touchfile')
	inputs.dir exampleProjectDir
	outputs.file exampleProjectTouchfile
    baseName "exampleProject"
    include "exampleProject/**"
    doLast {
	  exampleProjectTouchfile.delete()
	  buildDir.mkdirs()
	  exampleProjectTouchfile.createNewFile()
    }
}

task glueInstallDirZip(type: Zip) {
	from projectDir
	ext.glueInstallDir = new File(projectDir, 'gluetools')
	ext.glueInstallDirTouchfile = new File(buildDir, '/glueInstallDir.touchfile')
	inputs.dir glueInstallDir
	outputs.file glueInstallDirTouchfile
    baseName "glueInstallDir"
    include "gluetools/**"
    doLast {
	  glueInstallDirTouchfile.delete()
	  buildDir.mkdirs()
	  glueInstallDirTouchfile.createNewFile()
    }
}


/*docker {
    name 'cvrbioinformatics/gluetools:'+project.version
    tags 'latest'
    dockerfile file('Dockerfile')
	copySpec.from("docker").into("docker")
	buildArgs([glueVersion: project.version])
}

tasks.docker.dependsOn { tasks.initDockerContext }
tasks.docker.dependsOn { tasks.jar }*/

 task initDockerContext(type: Copy, dependsOn: ['exampleProjectZip','jar']) {
     from('build/libs/') {
         include 'gluetools-core-'+project.version+'.jar'
     }
     from('build/distributions/') {
         include 'exampleProject-'+project.version+'.zip'
     }
     from('gluetools/bin') {
         include 'gluetools.sh'
     }
     into 'build/docker/docker'
 }
 

