apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.hidetake.ssh'

sourceCompatibility = 1.8

remotes {
  gluehome {
    host = 'gluehome.cvr.gla.ac.uk'
    user = 'js460b'
    identity = file('/Users/joshsinger/.ssh/gluehome_id_rsa')
  }
  omega {
    host = 'omega.cvr.gla.ac.uk'
    user = 'sing01j'
    identity = file('/Users/joshsinger/.ssh/omega_id_rsa')
  }
  alpha {
    host = 'alpha.cvr.gla.ac.uk'
    user = 'sing01j'
    identity = file('/Users/joshsinger/.ssh/alpha_id_rsa')
  }
  gluehome_aws {
    host = '52.16.113.119'
    user = 'ubuntu'
    identity = file('/Users/joshsinger/.ssh/gluehome-aws.pem')
  }
  gluetest {
    host = '192.168.56.20'
    user = 'ubuntu'
    identity = file('/Users/joshsinger/.ssh/gluetest_id_rsa')
  }
}

buildscript {
  repositories {
    // for ssh-deploy stuff
    jcenter()
  }
  dependencies {
    classpath group: 'org.hidetake', name: 'gradle-ssh-plugin', version: '1.1.3'
  }
}


jar {
    manifest {
        attributes 'Implementation-Title': 'GLUE tools',
                   'Implementation-Version': version
    }
}

task jarAll(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'GLUE tools',  
        	       'Implementation-Version': version,
                   'Main-Class': 'uk.ac.gla.cvr.gluetools.core.console.Console'

    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}


// config for Glue which tells it where to find its database. 
task deployGlueConfigGlueHome {
  ext.glueConfigFile = new File(projectDir, '/gluehome/gluetools-config.xml')
  ext.glueConfigTouchfile = new File(buildDir, '/deployGlueConfigGlueHome.touchfile')
  inputs.file glueConfigFile
  outputs.file glueConfigTouchfile
  doLast {
	  println "Uploading "+glueConfigFile.name
	  ssh.run {
	    session(remotes.gluehome) {
	      put from: glueConfigFile, into: '/opt/gluetools/conf'
	    }
	  }
	  glueConfigTouchfile.delete()
	  buildDir.mkdirs()
	  glueConfigTouchfile.createNewFile()
  }
}


// config for Glue which tells it where to find its database. 
task deployGlueConfigGlueHomeAWS {
  ext.glueConfigFile = new File(projectDir, '/gluehome_aws/gluetools-config.xml')
  ext.glueConfigTouchfile = new File(buildDir, '/deployGlueConfigGlueHomeAWS.touchfile')
  inputs.file glueConfigFile
  outputs.file glueConfigTouchfile
  doLast {
	  println "Uploading "+glueConfigFile.name
	  ssh.run {
	    session(remotes.gluehome_aws) {
	      execute "sudo mkdir -p /opt/gluetools/conf"
	      put from: glueConfigFile, into: '/tmp'
	      execute "sudo mv /tmp/gluetools-config.xml /opt/gluetools/conf/"
	    }
	  }
	  glueConfigTouchfile.delete()
	  buildDir.mkdirs()
	  glueConfigTouchfile.createNewFile()
  }
}


// config for Glue which tells it where to find its database. 
task deployGlueConfigOmega {
  ext.omegaDir = new File(projectDir, 'omega')
  ext.glueConfigFile = new File(omegaDir, 'gluetools-config.xml')
  ext.glueConfigTouchfile = new File(buildDir, '/deployGlueConfigOmega.touchfile')
  inputs.file glueConfigFile
  outputs.file glueConfigTouchfile
  doLast {
	  println "Uploading "+glueConfigFile.name
	  ssh.run {
	    session(remotes.omega) {
	      execute 'mkdir -p /home/sing01j/gluetools/conf'
	      execute 'chmod a+rw /home/sing01j/gluetools/conf'
	      put from: glueConfigFile, into: '/home/sing01j/gluetools/conf'
	    }
	  }
	  glueConfigTouchfile.delete()
	  buildDir.mkdirs()
	  glueConfigTouchfile.createNewFile()
  }
}


// gluetools core jar. 
task deployJarGlueHome(dependsOn: ['jarAll','deployGlueConfigGlueHome']) {
  ext.jarFile = new File(buildDir, '/libs/'+project.name+"-all-"+version+'.jar')
  ext.deployJarGlueHomeTouchfile = new File(buildDir, '/deployJarGlueHome.touchfile')
  inputs.file jarFile
  outputs.file deployJarGlueHomeTouchfile
  doLast {
	  println "Uploading "+jarFile.name
	  ssh.run {
	    session(remotes.gluehome) {
	      execute 'rm -rf /opt/gluetools/lib/*.jar'
	      put from: jarFile, into: '/opt/gluetools/lib'
	    }
	  }
	  deployJarGlueHomeTouchfile.delete()
	  buildDir.mkdirs()
	  deployJarGlueHomeTouchfile.createNewFile()
  }
}

// gluetools core jar on Omega
task deployJarOmega(dependsOn: ['jarAll']) {
  ext.jarFile = new File(buildDir, '/libs/'+project.name+"-all-"+version+'.jar')
  ext.deployJarOmegaTouchfile = new File(buildDir, '/deployJarOmega.touchfile')
  inputs.file jarFile
  outputs.file deployJarOmegaTouchfile
  doLast {
	  println "Uploading "+jarFile.name
	  ssh.run {
	    session(remotes.omega) {
	      execute 'rm /home/sing01j/gluetools/lib/*.jar'
	      put from: jarFile, into: '/home/sing01j/gluetools/lib/'
	      execute 'chmod a+r /home/sing01j/gluetools/lib/*'
	    }
	  }
	  deployJarOmegaTouchfile.delete()
	  buildDir.mkdirs()
	  deployJarOmegaTouchfile.createNewFile()
  }
}

// gluetools core jar on Alpha
task deployJarAlpha(dependsOn: ['jarAll']) {
  ext.jarFile = new File(buildDir, '/libs/'+project.name+"-all-"+version+'.jar')
  ext.deployJarAlphaTouchfile = new File(buildDir, '/deployJarAlpha.touchfile')
  inputs.file jarFile
  outputs.file deployJarAlphaTouchfile
  doLast {
	  println "Uploading "+jarFile.name
	  ssh.run {
	    session(remotes.alpha) {
	      execute 'rm /home2/sing01j/gluetools/lib/*.jar'
	      put from: jarFile, into: '/home2/sing01j/gluetools/lib/'
	      execute 'chmod a+r /home2/sing01j/gluetools/lib/*'
	    }
	  }
	  deployJarAlphaTouchfile.delete()
	  buildDir.mkdirs()
	  deployJarAlphaTouchfile.createNewFile()
  }
}



task dumpGlueDB(type: Exec) {
	standardOutput = new FileOutputStream(new File('/tmp/gluedb.sql'))
	commandLine '/usr/local/mysql/bin/mysqldump', '-u', 'gluetools', '--password=gluetools', 'GLUE_TOOLS'
}

task zipGlueDB(type: Exec, dependsOn: ['dumpGlueDB']) {
	commandLine '/usr/bin/gzip', '-f', '/tmp/gluedb.sql'
}

// TODO implement this task and have other tasks depend on it.
task buildHcvProject() {
	ext.hcvProjectDir = new File(projectDir.getParentFile().getParentFile(), 'hcvGlue')
    ext.buildHcvProjectTouchfile = new File(buildDir, '/buildHcvProject.touchfile')
    inputs.dir hcvProjectDir
    outputs.file buildHcvProjectTouchfile
    doLast {
	  buildHcvProjectTouchfile.delete()
	  buildDir.mkdirs()
	  buildHcvProjectTouchfile.createNewFile()
    }
}


task deployGlueDbToGlueHome(dependsOn: ['zipGlueDB']) {
  doLast {
	  println "Uploading GLUE DB"
	  ssh.run {
	    session(remotes.gluehome) {
	 	  put from: '/tmp/gluedb.sql.gz', into: '/tmp/gluedb.sql.gz'
	      execute 'echo "drop database GLUE_TOOLS; create database GLUE_TOOLS;" | mysql -u gluetools --password=gluetools GLUE_TOOLS'
	      execute 'gunzip -c /tmp/gluedb.sql.gz | mysql -u gluetools --password=gluetools GLUE_TOOLS'
	      execute 'rm /tmp/gluedb.sql.gz'
	    }
	  }
  }
}

task deployGlueDbToGlueHomeAWS(dependsOn: ['zipGlueDB']) {
  doLast {
	  println "Uploading GLUE DB"
	  ssh.run {
	    session(remotes.gluehome_aws) {
	 	  put from: '/tmp/gluedb.sql.gz', into: '/tmp/gluedb.sql.gz'
	      execute 'echo "drop database GLUE_TOOLS; create database GLUE_TOOLS;" | mysql -u gluetools --password=gluetools GLUE_TOOLS'
	      execute 'gunzip -c /tmp/gluedb.sql.gz | mysql -u gluetools --password=gluetools GLUE_TOOLS'
	      execute 'rm /tmp/gluedb.sql.gz'
	    }
	  }
  }
}

task deployGlueDbToOmega(dependsOn: ['zipGlueDB']) {
  doLast {
	  println "Uploading GLUE DB"
	  ssh.run {
	    session(remotes.omega) {
	 	  put from: '/tmp/gluedb.sql.gz', into: '/tmp/gluedb.sql.gz'
	      execute 'echo "drop database GLUETOOLS; create database GLUETOOLS;" | mysql -u gluetools --password=gluetools GLUETOOLS'
	      execute 'gunzip -c /tmp/gluedb.sql.gz | mysql -u gluetools --password=gluetools GLUETOOLS'
	      execute 'rm /tmp/gluedb.sql.gz'
	    }
	  }
  }
}




repositories {
    mavenCentral()
	// this is for the vpp dependency of the cayenne tools. 
    maven {
    	url 'http://repo.spring.io/libs-release-remote/'
    }
    // required for j-text-utils
    // maven {
    //	url 'http://d-maven.googlecode.com/svn/trunk/repo'
    // }
}


task checkCayenneTools << {
    ant.taskdef(name:'cgen', 
    			classname:'org.apache.cayenne.tools.CayenneGeneratorTask', 
    			classpath: configurations.cgen.asPath)
}


configurations {
    cgen
}


// uses cayenne to generate the datamodel classes.
task datamodel(dependsOn: 'checkCayenneTools') << {
	String destDir = 'src/main/java'
	String superPkg = 'uk.ac.gla.cvr.gluetools.core.datamodel.auto'
	String mapFile1 = 'src/main/resources/gluecore-map.map.xml'
	ant.cgen(map: mapFile1, destDir: destDir, usepkgpath: true, superpkg: superPkg)
	String mapFile2 = 'src/main/resources/glueproject-map.map.xml'
	ant.cgen(map: mapFile2, destDir: destDir, usepkgpath: true, superpkg: superPkg)
	String mapFile3 = 'src/main/resources/gluemeta-map.map.xml'
	ant.cgen(map: mapFile3, destDir: destDir, usepkgpath: true, superpkg: superPkg)
}

// uses cayenne to generate the datamodel classes.
task datamodelDigs(dependsOn: 'checkCayenneTools') << {
	String destDir = 'src/main/java'
	String superPkg = 'uk.ac.gla.cvr.gluetools.core.digs.importer.model.auto'
	String mapFile1 = 'src/main/resources/digs-map.map.xml'
	ant.cgen(map: mapFile1, destDir: destDir, usepkgpath: true, superpkg: superPkg)
}



dependencies {
   	compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'
    cgen group: 'org.apache.cayenne', name: 'cayenne-tools', version: '3.1'
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task exampleProjectZip(type: Zip) {
	from projectDir
	ext.exampleProjectDir = new File(projectDir, 'exampleProject')
	ext.exampleProjectTouchfile = new File(buildDir, '/exampleProject.touchfile')
	inputs.dir exampleProjectDir
	outputs.file exampleProjectTouchfile
    baseName "exampleProject"
    include "exampleProject/**"
    doLast {
	  exampleProjectTouchfile.delete()
	  buildDir.mkdirs()
	  exampleProjectTouchfile.createNewFile()
    }
}

task glueInstallDirZip(type: Zip) {
	from projectDir
	ext.glueInstallDir = new File(projectDir, 'gluetools')
	ext.glueInstallDirTouchfile = new File(buildDir, '/glueInstallDir.touchfile')
	inputs.dir glueInstallDir
	outputs.file glueInstallDirTouchfile
    baseName "glueInstallDir"
    include "gluetools/**"
    doLast {
	  glueInstallDirTouchfile.delete()
	  buildDir.mkdirs()
	  glueInstallDirTouchfile.createNewFile()
    }
}


// assumes Ubuntu 14.04
// mafft download line might fail if they change the version available on the web.
task initGlueAWSWebServer {
  doLast {
	  ssh.run {
	    // session(remotes.gluetest) {
	    session(remotes.gluehome_aws) {

	    	// stuff to manipulate package installer settings to allow non-interactive config
		    execute 'sudo apt-get install -y python-software-properties debconf-utils'
	    
	    	// Oracle Java 8
			// this repo contains Oracle Java installer 
			execute 'sudo add-apt-repository -y ppa:webupd8team/java'
			execute 'sudo apt-get update'
			// accept oracle license
			execute 'echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | sudo debconf-set-selections'
			// install java8 jdk
			execute 'sudo apt-get install -y oracle-java8-installer'




            // Apache Tomcat 7
			execute 'sudo apt-get install -y tomcat7' 
			// tell Tomcat where to find Java
			execute "sudo sed -i 's/#JAVA_HOME.*/JAVA_HOME=\\/usr\\/lib\\/jvm\\/java-8-oracle\\/jre/g' /etc/default/tomcat7"

			// Required for running Tomcat on port 80
			execute "sudo apt-get install -y authbind"
			execute "sudo sed -i 's/#AUTHBIND=no/AUTHBIND=yes/g' /etc/default/tomcat7"
			// Increase Tomcat's Java heap to 1 Gb
			execute "sudo sed -i 's/JAVA_OPTS.*/JAVA_OPTS=\"-Djava.awt.headless=true -Xmx1024m -XX:+UseConcMarkSweepGC\"/g' /etc/default/tomcat7"

			execute "sudo touch /etc/authbind/byport/80"
			execute "sudo chmod 500 /etc/authbind/byport/80"
			execute "sudo chown tomcat7 /etc/authbind/byport/80"
			

			put from: 'gluehome_aws/server.xml', into: '/home/ubuntu/server.xml'
			execute "sudo cp /home/ubuntu/server.xml /etc/tomcat7/server.xml"
			
			// start Tomcat
			execute 'sudo service tomcat7 start'

			// MySQL (normally 5.5)
			execute 'echo "mysql-server mysql-server/root_password password root123" | sudo debconf-set-selections'
			execute 'echo "mysql-server mysql-server/root_password_again password root123" | sudo debconf-set-selections'
			execute 'sudo apt-get -y install mysql-server'
			// start on boot
			execute 'sudo update-rc.d mysql defaults'
			
			// create user gluetools with correct grants
			execute "echo 'GRANT ALL ON GLUE_TOOLS.* TO \"gluetools\"@\"localhost\" identified by \"gluetools\";' | mysql -u root --password=root123"
			// create GLUE_TOOLS database
			execute "echo 'create database GLUE_TOOLS;' | mysql -u gluetools --password=gluetools" 
			
			execute "sudo mkdir -p /opt/gluetools"
			
			// GIT
			execute "sudo apt-get install -y git"
			
			// MAKE
			execute "sudo apt-get install -y make" 

			// GCC
			execute "sudo apt-get install -y gcc" 
			
			// RAXML
			execute "cd ~; git clone https://github.com/stamatak/standard-RAxML.git"
			execute "cd ~/standard-RAxML/ ; git checkout 3abe69b"
			execute "cd ~/standard-RAxML/ ; make -f Makefile.AVX.PTHREADS.gcc"
			execute "sudo mkdir -p /opt/gluetools/raxml/bin"
			execute "sudo mkdir -p /opt/gluetools/raxml/tmp"
			execute "sudo chmod a+rwx /opt/gluetools/raxml/tmp"
			execute "sudo cp ~/standard-RAxML/raxmlHPC-PTHREADS-AVX /opt/gluetools/raxml/bin"

			// MAFFT
			execute "sudo mkdir -p /opt/gluetools/mafft/tmp"
			execute "sudo chmod a+rwx /opt/gluetools/mafft/tmp"
			execute "cd ~; wget http://mafft.cbrc.jp/alignment/software/mafft-7.305-with-extensions-src.tgz"
			execute "tar xvfz mafft-7.305-with-extensions-src.tgz"
			execute "cd ~/mafft-7.305-with-extensions/core ; make clean ; make ; sudo make install"

			// BLAST			
			execute "sudo mkdir -p /opt/gluetools/blast"
			execute "cd ~; wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.2.31/ncbi-blast-2.2.31+-x64-linux.tar.gz"
			execute "cd ~; tar xvfz ncbi-blast-2.2.31+-x64-linux.tar.gz"
			execute "sudo cp -r ~/ncbi-blast-2.2.31+ /opt/gluetools/blast"
			execute "sudo mkdir -p /opt/gluetools/blast/ncbi-blast-2.2.31+/blastdbs"
			execute "sudo chmod a+rwx /opt/gluetools/blast/ncbi-blast-2.2.31+/blastdbs"

	    }
	  }
  }
}


// add stuff inside this task for testing setup
task initGlueAWSWebServerTemp {
  doLast {
	  ssh.run {
	    // session(remotes.gluetest) {
	    session(remotes.gluehome_aws) {
		}
	}
  }
}



