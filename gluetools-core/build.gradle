/**
 *    GLUE: A flexible system for virus sequence data
 *    Copyright (C) 2018 The University of Glasgow
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Affero General Public License as published
 *    by the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.

 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *    Contact details:
 *    MRC-University of Glasgow Centre for Virus Research
 *    Sir Michael Stoker Building, Garscube Campus, 464 Bearsden Road, 
 *    Glasgow G61 1QH, United Kingdom
 *    
 *    Josh Singer: josh.singer@glasgow.ac.uk
 *    Rob Gifford: robert.gifford@glasgow.ac.uk
 */

plugins {
    id 'java'
    id 'eclipse-wtp'
    id 'org.hidetake.ssh' version '1.1.3'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    mavenCentral()
    // for the vpp dependency of the cayenne tools
    maven {
        url 'https://repo.maven.apache.org/maven2'
    }
    flatDir {
        dirs 'libs' // Specify the local directory where the JAR is located
    }
}

configurations {
    cgen
}

dependencies {
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'
    implementation group: 'org.apache.cayenne', name: 'cayenne-tools', version: '3.1.1'
    implementation name: 'vpp-2.2.1' // Add the local JAR as a dependency
}


// handle duplicates
tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// jar task

jar {
    manifest {
        attributes(
            'Implementation-Title': 'GLUE tools',
            'Implementation-Version': version,
            'Main-Class': 'uk.ac.gla.cvr.gluetools.core.console.Console'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA',
            'META-INF/*.SF',
            'META-INF/*.DSA',
            'META-INF/LICENSE.txt',
            'META-INF/LICENSE',
            'META-INF/DISCLAIMER',
            'META-INF/DEPENDENCIES',
            'META-INF/NOTICE.txt',
            'META-INF/NOTICE'
    metaInf {
        from 'src/main/java/META-INF/LICENSE.txt', 'src/main/java/META-INF/NOTICE.txt'
    }
}


task checkCayenneTools {
    doLast {
        ant.taskdef(
            name: 'cgen',
            classname: 'org.apache.cayenne.tools.CayenneGeneratorTask',
            classpath: configurations.cgen.asPath
        )
    }
}

task datamodel(dependsOn: 'checkCayenneTools') {
    doLast {
        String destDir = 'src/main/java'
        String superPkg = 'uk.ac.gla.cvr.gluetools.core.datamodel.auto'
        ant.cgen(map: 'src/main/resources/gluecore-map.map.xml', destDir: destDir, usepkgpath: true, superpkg: superPkg)
        ant.cgen(map: 'src/main/resources/glueproject-map.map.xml', destDir: destDir, usepkgpath: true, superpkg: superPkg)
        ant.cgen(map: 'src/main/resources/gluemeta-map.map.xml', destDir: destDir, usepkgpath: true, superpkg: superPkg)
    }
}

task datamodelDigs(dependsOn: 'checkCayenneTools') {
    doLast {
        String destDir = 'src/main/java'
        String superPkg = 'uk.ac.gla.cvr.gluetools.core.digs.importer.model.auto'
        ant.cgen(map: 'src/main/resources/digs-map.map.xml', destDir: destDir, usepkgpath: true, superpkg: superPkg)
    }
}

docker {
    registryCredentials {
        username = System.getenv("DOCKER_USERNAME")
        password = System.getenv("DOCKER_PASSWORD")
    }
}

task buildMySqlDockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
    inputDir.set(file("docker"))
    images.add("cvrbioinformatics/gluetools-mysql:${project.version}")
    images.add("cvrbioinformatics/gluetools-mysql:latest")
}

task pushMySqlDockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
    images.add("cvrbioinformatics/gluetools-mysql:${project.version}")
    images.add("cvrbioinformatics/gluetools-mysql:latest")
}

buildMySqlDockerImage.dependsOn jar
pushMySqlDockerImage.dependsOn buildMySqlDockerImage

task exampleProjectZip(type: Zip) {
    from projectDir
    ext.exampleProjectDir = new File(projectDir, 'exampleProject')
    ext.exampleProjectTouchfile = new File(buildDir, '/exampleProject.touchfile')
    inputs.dir exampleProjectDir
    outputs.file exampleProjectTouchfile
    archiveFileName.set("exampleProject.zip")
    include "exampleProject/**"
    doLast {
        exampleProjectTouchfile.delete()
        buildDir.mkdirs()
        exampleProjectTouchfile.createNewFile()
    }
}
