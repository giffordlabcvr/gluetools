apply plugin: 'war'

apply plugin: 'org.hidetake.ssh'

remotes {
  gluehome_aws {
    host = '52.16.113.119'
    user = 'ubuntu'
    identity = file('/Users/joshsinger/.ssh/gluehome-aws.pem')
  }
  
}

buildscript {
  repositories {
    // for ssh-deploy stuff
    jcenter()
  }
  dependencies {
    classpath group: 'org.hidetake', name: 'gradle-ssh-plugin', version: '1.1.3'
    classpath group: 'commons-io', name: 'commons-io', version: '1.3.2'
  }
}

repositories {
	mavenLocal()
    mavenCentral()
}

configurations {
	gluetoolsWebWar
	gluetoolsWsWar
}

dependencies {
    gluetoolsWebWar group: 'cvr.ac.uk', name: 'gluetools-web', version: version
    gluetoolsWsWar group: 'cvr.ac.uk', name: 'gluetools-ws', version: version
}

task copyGluetoolsWebWar(type: Copy) {
    dependsOn ':gluetools-web:install'
    from configurations.gluetoolsWebWar
    into "$buildDir/runtimeWars"
    rename('gluetools-web-'+version+'.war', 'gluetools-web.war')
}

task copyGluetoolsWsWar(type: Copy) {
    dependsOn ':gluetools-ws:install'
    from configurations.gluetoolsWsWar
    into "$buildDir/runtimeWars"
    rename('gluetools-ws-'+version+'.war', 'gluetools-ws.war')
}

war {
	webAppDirName = 'WebContent'
	archiveName 'gluetoolsApp.war'
	dependsOn 'copyStaticContent'
}

task deployGluetoolsAppGlueHomeAWS(dependsOn: [
	'deployGluetoolsWebWarGlueHomeAWS',
	'deployGluetoolsAppGlueConfigGlueHomeAWS',
	'deployGluetoolsAppGluetoolsWsContextXmlGlueHomeAWS',
	'deployGluetoolsWsWarGlueHomeAWS',
	'deployGluetoolsAppWarGlueHomeAWS'])

task deployGluetoolsWebWarGlueHomeAWS(type: DeployWarTask) {
    dependsOn 'copyGluetoolsWebWar'
    warFile = new File(buildDir, 'runtimeWars/gluetools-web.war')
    remote = remotes.gluehome_aws
    taskBuildDir = buildDir
	warBaseName = org.apache.commons.io.FilenameUtils.getBaseName(warFile.name)
    touchFile = new File(taskBuildDir, '/deploy.'+warBaseName+'.'+remote.name+'.touchfile')
    inputs.file warFile
    outputs.file touchFile
    taskSsh = ssh
}

task deployGluetoolsWsWarGlueHomeAWS(type: DeployWarTask) {
    dependsOn 'copyGluetoolsWsWar'
    warFile = new File(buildDir, 'runtimeWars/gluetools-ws.war')
    remote = remotes.gluehome_aws
    taskBuildDir = buildDir
	warBaseName = org.apache.commons.io.FilenameUtils.getBaseName(warFile.name)
    touchFile = new File(taskBuildDir, '/deploy.'+warBaseName+'.'+remote.name+'.touchfile')
    inputs.file warFile
    outputs.file touchFile
    taskSsh = ssh
}

task deployGluetoolsAppWarGlueHomeAWS(type: DeployWarTask, dependsOn: war) {
    warFile = new File(buildDir, '/libs/gluetoolsApp.war')
    remote = remotes.gluehome_aws
    taskBuildDir = buildDir
	warBaseName = org.apache.commons.io.FilenameUtils.getBaseName(warFile.name)
    touchFile = new File(taskBuildDir, '/deploy.'+warBaseName+'.'+remote.name+'.touchfile')
    inputs.file warFile
    outputs.file touchFile
    taskSsh = ssh
}

class DeployWarTask extends DefaultTask {
	File warFile
	org.hidetake.groovy.ssh.core.Remote remote
	File taskBuildDir
	String warBaseName
    File touchFile
    org.hidetake.groovy.ssh.core.Service taskSsh

    @TaskAction
    def deploy() {
		  println "Uploading "+warFile
		  taskSsh.run {
		    session(remote) {
		      put from: warFile.absolutePath, into: '/tmp/'+warFile.name
		      execute 'sudo service tomcat7 stop; sleep 10s'
		      execute 'sudo mkdir -p /var/lib/tomcat7/webapps_tools'
		      execute 'sudo chmod a+rwx /var/lib/tomcat7/webapps_tools'
		      execute 'sudo rm -rf /var/lib/tomcat7/webapps_tools/'+warBaseName
		      execute 'sudo rm -rf /var/lib/tomcat7/webapps_tools/'+warFile.name
		      execute 'sudo mv /tmp/'+warFile.name+' /var/lib/tomcat7/webapps_tools/'+warFile.name
		      execute 'sudo rm -rf /var/lib/tomcat7/work/Catalina/tools.glue.cvr.ac.uk/'+warBaseName
		      execute 'sudo rm -rf /var/cache/tomcat7/Catalina/tools.glue.cvr.ac.uk/'+warBaseName
		      execute 'sudo service tomcat7 start'
		    }
		  }
		  println("touchFile:"+touchFile)
		  touchFile.delete()
		  println("taskBuildDir:"+taskBuildDir)
		  taskBuildDir.mkdirs()
		  touchFile.createNewFile()
	}
}

task copyStaticContent(dependsOn: ['cleanStaticContent', 'copyDownloads', 'copyExampleProject'])

task copyDownloads(dependsOn: [':gluetools-core:jar', ':gluetools-core:exampleProjectZip', ':gluetools-core:glueInstallDirZip', ], type: Copy) {
    from '../gluetools-core/build/libs/gluetools-core-'+version+'.jar'
    from '../gluetools-core/build/distributions/exampleProject-'+version+'.zip'
    from '../gluetools-core/build/distributions/glueInstallDir-'+version+'.zip'
    from '../gluetools-core/gluetools/conf/gluetools-config.xml'
    into 'WebContent/downloads'
}

task copyExampleProject(dependsOn: [], type: Copy) {
    from '../gluetools-core/exampleProject'
    into 'WebContent/exampleProject'
}


task cleanStaticContent(type: Delete) {
	delete fileTree(dir: 'WebContent/downloads').matching { include 'gluetools-core-*.jar' }
	delete fileTree(dir: 'WebContent/downloads').matching { include 'exampleProject-*.zip' }
	delete fileTree(dir: 'WebContent/downloads').matching { include 'glueInstallDir-*.zip' }
	delete fileTree(dir: 'WebContent/downloads').matching { include 'gluetools-config.xml' }
	delete fileTree(dir: 'WebContent/exampleProject').matching { include '*' }
}


// config for gluetoolsApp gluetools-ws webapp 
task deployGluetoolsAppGluetoolsWsContextXmlGlueHomeAWS() {
  ext.file = new File(projectDir, '/gluehome_aws/gluetools-ws-context.xml')
  ext.touchfile = new File(buildDir, '/deployGluetoolsAppGluetoolsWsContextXmlGlueHomeAWS.touchfile')
  inputs.file file
  outputs.file touchfile
  doLast {
	  println "Uploading "+file.name
	  ssh.run {
	    session(remotes.gluehome_aws) {
	      put from: file.absolutePath, into: '/tmp/gluetools-ws.xml'
	      execute 'sudo service tomcat7 stop; sleep 10s'
	      execute 'sudo mkdir -p /var/lib/tomcat7/conf/Catalina/tools.glue.cvr.ac.uk'
	      execute 'sudo mv /tmp/gluetools-ws.xml /var/lib/tomcat7/conf/Catalina/tools.glue.cvr.ac.uk/gluetools-ws.xml'
	      execute 'sudo service tomcat7 start'
	    }
	  }
	  touchfile.delete()
	  buildDir.mkdirs()
	  touchfile.createNewFile()
  }
}

// config for gluetoolsApp glue engine which tells it where to find its database. 
task deployGluetoolsAppGlueConfigGlueHomeAWS {
  ext.file = new File(projectDir, '/gluehome_aws/gluetoolsApp-gluetools-config.xml')
  ext.touchfile = new File(buildDir, '/deployGluetoolsAppGlueConfigGlueHomeAWS.touchfile')
  inputs.file file
  outputs.file touchfile
  doLast {
	  println "Uploading "+file.name
	  ssh.run {
	    session(remotes.gluehome_aws) {
	      execute "sudo mkdir -p /opt/gluetools/conf"
	      put from: file, into: '/tmp'
	      execute "sudo mv /tmp/gluetoolsApp-gluetools-config.xml /opt/gluetools/conf/"
	    }
	  }
	  touchfile.delete()
	  buildDir.mkdirs()
	  touchfile.createNewFile()
  }
}

task initGluetoolsAppDBGlueHomeAWS {
  doLast {
	  ssh.run {
	    session(remotes.gluehome_aws) {
			// create user gluetools with correct grants
			execute "echo 'GRANT ALL ON GLUETOOLS_APP.* TO \"gluetoolsapp\"@\"localhost\" identified by \"gluetoolsapp\";' | mysql -u root --password=root123"
			// create GLUETOOLS_APP database
			execute "echo 'create database GLUETOOLS_APP character set UTF8;' | mysql -u gluetoolsapp --password=gluetoolsapp" 
	    }
	  }
  }
}

task recreateGluetoolsAppDBGlueHomeAWS {
  doLast {
	  ssh.run {
	    session(remotes.gluehome_aws) {
			// create GLUETOOLS_APP database
			execute "echo 'drop database GLUETOOLS_APP; create database GLUETOOLS_APP character set UTF8;' | mysql -u gluetoolsapp --password=gluetoolsapp" 
	    }
	  }
  }
}












